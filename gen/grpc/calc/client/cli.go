// Code generated by goa v3.5.2, DO NOT EDIT.
//
// calc gRPC client CLI support package
//
// Command:
// $ goa gen goa-test/design

package client

import (
	"encoding/json"
	"fmt"
	calc "goa-test/gen/calc"
	calcpb "goa-test/gen/grpc/calc/pb"
)

// BuildMultiplyPayload builds the payload for the calc multiply endpoint from
// CLI flags.
func BuildMultiplyPayload(calcMultiplyMessage string) (*calc.MultiplyPayload, error) {
	var err error
	var message calcpb.MultiplyRequest
	{
		if calcMultiplyMessage != "" {
			err = json.Unmarshal([]byte(calcMultiplyMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"a\": 9048659887702528681,\n      \"b\": 40344070816643173\n   }'")
			}
		}
	}
	v := &calc.MultiplyPayload{
		A: int(message.A),
		B: int(message.B),
	}

	return v, nil
}

// BuildAddPayload builds the payload for the calc add endpoint from CLI flags.
func BuildAddPayload(calcAddMessage string) (*calc.AddPayload, error) {
	var err error
	var message calcpb.AddRequest
	{
		if calcAddMessage != "" {
			err = json.Unmarshal([]byte(calcAddMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"a\": 9220305559046467008,\n      \"b\": 7814335094839211944\n   }'")
			}
		}
	}
	v := &calc.AddPayload{
		A: int(message.A),
		B: int(message.B),
	}

	return v, nil
}

// BuildSubtractPayload builds the payload for the calc subtract endpoint from
// CLI flags.
func BuildSubtractPayload(calcSubtractMessage string) (*calc.SubtractPayload, error) {
	var err error
	var message calcpb.SubtractRequest
	{
		if calcSubtractMessage != "" {
			err = json.Unmarshal([]byte(calcSubtractMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"a\": 1867970362095414781,\n      \"b\": 78697417377061451\n   }'")
			}
		}
	}
	v := &calc.SubtractPayload{
		A: int(message.A),
		B: int(message.B),
	}

	return v, nil
}

// BuildDividePayload builds the payload for the calc divide endpoint from CLI
// flags.
func BuildDividePayload(calcDivideMessage string) (*calc.DividePayload, error) {
	var err error
	var message calcpb.DivideRequest
	{
		if calcDivideMessage != "" {
			err = json.Unmarshal([]byte(calcDivideMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"a\": 7742361993167804819,\n      \"b\": 1839273396588264574\n   }'")
			}
		}
	}
	v := &calc.DividePayload{
		A: int(message.A),
		B: int(message.B),
	}

	return v, nil
}

// BuildGetNotesPayload builds the payload for the calc getNotes endpoint from
// CLI flags.
func BuildGetNotesPayload(calcGetNotesMessage string) (*calc.GetNotesPayload, error) {
	var err error
	var message calcpb.GetNotesRequest
	{
		if calcGetNotesMessage != "" {
			err = json.Unmarshal([]byte(calcGetNotesMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"userID\": \"Voluptates rerum facere quas.\"\n   }'")
			}
		}
	}
	v := &calc.GetNotesPayload{
		UserID: message.UserId,
	}

	return v, nil
}

// BuildGetNotePayload builds the payload for the calc getNote endpoint from
// CLI flags.
func BuildGetNotePayload(calcGetNoteMessage string) (*calc.GetNotePayload, error) {
	var err error
	var message calcpb.GetNoteRequest
	{
		if calcGetNoteMessage != "" {
			err = json.Unmarshal([]byte(calcGetNoteMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"uuid\": \"Est debitis accusamus quia minus inventore accusamus.\"\n   }'")
			}
		}
	}
	v := &calc.GetNotePayload{
		UUID: message.Uuid,
	}

	return v, nil
}

// BuildCreateNotePayload builds the payload for the calc createNote endpoint
// from CLI flags.
func BuildCreateNotePayload(calcCreateNoteMessage string) (*calc.CreateNotePayload, error) {
	var err error
	var message calcpb.CreateNoteRequest
	{
		if calcCreateNoteMessage != "" {
			err = json.Unmarshal([]byte(calcCreateNoteMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"NoteDetails\": {\n         \"Body\": \"Ut itaque sit corrupti velit.\",\n         \"Title\": \"Non et.\"\n      },\n      \"userID\": \"Illum ea velit.\"\n   }'")
			}
		}
	}
	v := &calc.CreateNotePayload{
		UserID: message.UserId,
	}
	if message.NoteDetails != nil {
		v.NoteDetails = protobufCalcpbNoteDetailsToCalcNoteDetails(message.NoteDetails)
	}

	return v, nil
}

// BuildDeleteNotePayload builds the payload for the calc deleteNote endpoint
// from CLI flags.
func BuildDeleteNotePayload(calcDeleteNoteMessage string) (*calc.DeleteNotePayload, error) {
	var err error
	var message calcpb.DeleteNoteRequest
	{
		if calcDeleteNoteMessage != "" {
			err = json.Unmarshal([]byte(calcDeleteNoteMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"uuid\": \"Omnis debitis voluptatum est enim possimus exercitationem.\"\n   }'")
			}
		}
	}
	v := &calc.DeleteNotePayload{
		UUID: message.Uuid,
	}

	return v, nil
}
