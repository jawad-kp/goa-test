// Code generated by goa v3.5.2, DO NOT EDIT.
//
// calc gRPC client types
//
// Command:
// $ goa gen goa-test/design

package client

import (
	calc "goa-test/gen/calc"
	calcpb "goa-test/gen/grpc/calc/pb"

	goa "goa.design/goa/v3/pkg"
)

// NewMultiplyRequest builds the gRPC request type from the payload of the
// "multiply" endpoint of the "calc" service.
func NewMultiplyRequest(payload *calc.MultiplyPayload) *calcpb.MultiplyRequest {
	message := &calcpb.MultiplyRequest{
		A: int32(payload.A),
		B: int32(payload.B),
	}
	return message
}

// NewMultiplyResult builds the result type of the "multiply" endpoint of the
// "calc" service from the gRPC response type.
func NewMultiplyResult(message *calcpb.MultiplyResponse) int {
	result := int(message.Field)
	return result
}

// NewAddRequest builds the gRPC request type from the payload of the "add"
// endpoint of the "calc" service.
func NewAddRequest(payload *calc.AddPayload) *calcpb.AddRequest {
	message := &calcpb.AddRequest{
		A: int32(payload.A),
		B: int32(payload.B),
	}
	return message
}

// NewAddResult builds the result type of the "add" endpoint of the "calc"
// service from the gRPC response type.
func NewAddResult(message *calcpb.AddResponse) int {
	result := int(message.Field)
	return result
}

// NewSubtractRequest builds the gRPC request type from the payload of the
// "subtract" endpoint of the "calc" service.
func NewSubtractRequest(payload *calc.SubtractPayload) *calcpb.SubtractRequest {
	message := &calcpb.SubtractRequest{
		A: int32(payload.A),
		B: int32(payload.B),
	}
	return message
}

// NewSubtractResult builds the result type of the "subtract" endpoint of the
// "calc" service from the gRPC response type.
func NewSubtractResult(message *calcpb.SubtractResponse) int {
	result := int(message.Field)
	return result
}

// NewDivideRequest builds the gRPC request type from the payload of the
// "divide" endpoint of the "calc" service.
func NewDivideRequest(payload *calc.DividePayload) *calcpb.DivideRequest {
	message := &calcpb.DivideRequest{
		A: int32(payload.A),
		B: int32(payload.B),
	}
	return message
}

// NewDivideResult builds the result type of the "divide" endpoint of the
// "calc" service from the gRPC response type.
func NewDivideResult(message *calcpb.DivideResponse) float64 {
	result := message.Field
	return result
}

// NewGetNotesRequest builds the gRPC request type from the payload of the
// "getNotes" endpoint of the "calc" service.
func NewGetNotesRequest(payload *calc.GetNotesPayload) *calcpb.GetNotesRequest {
	message := &calcpb.GetNotesRequest{
		UserId: payload.UserID,
	}
	return message
}

// NewGetNotesResult builds the result type of the "getNotes" endpoint of the
// "calc" service from the gRPC response type.
func NewGetNotesResult(message *calcpb.GetNotesResponse) *calc.GetNotesResult {
	result := &calc.GetNotesResult{}
	if message.Notes != nil {
		result.Notes = make([]*calc.Note, len(message.Notes))
		for i, val := range message.Notes {
			result.Notes[i] = &calc.Note{}
			if val.Title != "" {
				result.Notes[i].Title = &val.Title
			}
			if val.Body != "" {
				result.Notes[i].Body = &val.Body
			}
			if val.Uuid != "" {
				result.Notes[i].UUID = &val.Uuid
			}
		}
	}
	return result
}

// NewGetNoteRequest builds the gRPC request type from the payload of the
// "getNote" endpoint of the "calc" service.
func NewGetNoteRequest(payload *calc.GetNotePayload) *calcpb.GetNoteRequest {
	message := &calcpb.GetNoteRequest{
		Uuid: payload.UUID,
	}
	return message
}

// NewGetNoteResult builds the result type of the "getNote" endpoint of the
// "calc" service from the gRPC response type.
func NewGetNoteResult(message *calcpb.GetNoteResponse) *calc.GetNoteResult {
	result := &calc.GetNoteResult{}
	if message.Note != nil {
		result.Note = protobufCalcpbNoteToCalcNote(message.Note)
	}
	return result
}

// NewCreateNoteRequest builds the gRPC request type from the payload of the
// "createNote" endpoint of the "calc" service.
func NewCreateNoteRequest(payload *calc.CreateNotePayload) *calcpb.CreateNoteRequest {
	message := &calcpb.CreateNoteRequest{
		UserId: payload.UserID,
	}
	if payload.NoteDetails != nil {
		message.NoteDetails = svcCalcNoteDetailsToCalcpbNoteDetails(payload.NoteDetails)
	}
	return message
}

// NewCreateNoteResult builds the result type of the "createNote" endpoint of
// the "calc" service from the gRPC response type.
func NewCreateNoteResult(message *calcpb.CreateNoteResponse) *calc.CreateNoteResult {
	result := &calc.CreateNoteResult{}
	if message.NoteResponse != nil {
		result.NoteResponse = protobufCalcpbNoteResponseToCalcNoteResponse(message.NoteResponse)
	}
	return result
}

// ValidateCreateNoteResponse runs the validations defined on
// CreateNoteResponse.
func ValidateCreateNoteResponse(message *calcpb.CreateNoteResponse) (err error) {
	if message.NoteResponse == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("NoteResponse", "message"))
	}
	return
}

// ValidateNoteResponse runs the validations defined on NoteResponse.
func ValidateNoteResponse(message *calcpb.NoteResponse) (err error) {

	return
}

// svcCalcNoteToCalcpbNote builds a value of type *calcpb.Note from a value of
// type *calc.Note.
func svcCalcNoteToCalcpbNote(v *calc.Note) *calcpb.Note {
	if v == nil {
		return nil
	}
	res := &calcpb.Note{}
	if v.Title != nil {
		res.Title = *v.Title
	}
	if v.Body != nil {
		res.Body = *v.Body
	}
	if v.UUID != nil {
		res.Uuid = *v.UUID
	}

	return res
}

// protobufCalcpbNoteToCalcNote builds a value of type *calc.Note from a value
// of type *calcpb.Note.
func protobufCalcpbNoteToCalcNote(v *calcpb.Note) *calc.Note {
	if v == nil {
		return nil
	}
	res := &calc.Note{}
	if v.Title != "" {
		res.Title = &v.Title
	}
	if v.Body != "" {
		res.Body = &v.Body
	}
	if v.Uuid != "" {
		res.UUID = &v.Uuid
	}

	return res
}

// protobufCalcpbNoteDetailsToCalcNoteDetails builds a value of type
// *calc.NoteDetails from a value of type *calcpb.NoteDetails.
func protobufCalcpbNoteDetailsToCalcNoteDetails(v *calcpb.NoteDetails) *calc.NoteDetails {
	if v == nil {
		return nil
	}
	res := &calc.NoteDetails{}
	if v.Title != "" {
		res.Title = &v.Title
	}
	if v.Body != "" {
		res.Body = &v.Body
	}

	return res
}

// svcCalcNoteDetailsToCalcpbNoteDetails builds a value of type
// *calcpb.NoteDetails from a value of type *calc.NoteDetails.
func svcCalcNoteDetailsToCalcpbNoteDetails(v *calc.NoteDetails) *calcpb.NoteDetails {
	if v == nil {
		return nil
	}
	res := &calcpb.NoteDetails{}
	if v.Title != nil {
		res.Title = *v.Title
	}
	if v.Body != nil {
		res.Body = *v.Body
	}

	return res
}

// svcCalcNoteResponseToCalcpbNoteResponse builds a value of type
// *calcpb.NoteResponse from a value of type *calc.NoteResponse.
func svcCalcNoteResponseToCalcpbNoteResponse(v *calc.NoteResponse) *calcpb.NoteResponse {
	res := &calcpb.NoteResponse{}
	if v.UUID != nil {
		res.Uuid = *v.UUID
	}

	return res
}

// protobufCalcpbNoteResponseToCalcNoteResponse builds a value of type
// *calc.NoteResponse from a value of type *calcpb.NoteResponse.
func protobufCalcpbNoteResponseToCalcNoteResponse(v *calcpb.NoteResponse) *calc.NoteResponse {
	res := &calc.NoteResponse{}
	if v.Uuid != "" {
		res.UUID = &v.Uuid
	}

	return res
}
