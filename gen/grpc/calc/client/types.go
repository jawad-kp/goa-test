// Code generated by goa v3.10.2, DO NOT EDIT.
//
// calc gRPC client types
//
// Command:
// $ goa gen goa-test/design

package client

import (
	calc "goa-test/gen/calc"
	calcpb "goa-test/gen/grpc/calc/pb"
)

// NewProtoMultiplyRequest builds the gRPC request type from the payload of the
// "multiply" endpoint of the "calc" service.
func NewProtoMultiplyRequest(payload *calc.MultiplyPayload) *calcpb.MultiplyRequest {
	message := &calcpb.MultiplyRequest{
		A: int32(payload.A),
		B: int32(payload.B),
	}
	return message
}

// NewMultiplyResult builds the result type of the "multiply" endpoint of the
// "calc" service from the gRPC response type.
func NewMultiplyResult(message *calcpb.MultiplyResponse) int {
	result := int(message.Field)
	return result
}

// NewProtoAddRequest builds the gRPC request type from the payload of the
// "add" endpoint of the "calc" service.
func NewProtoAddRequest(payload *calc.AddPayload) *calcpb.AddRequest {
	message := &calcpb.AddRequest{
		A: int32(payload.A),
		B: int32(payload.B),
	}
	return message
}

// NewAddResult builds the result type of the "add" endpoint of the "calc"
// service from the gRPC response type.
func NewAddResult(message *calcpb.AddResponse) int {
	result := int(message.Field)
	return result
}

// NewProtoSubtractRequest builds the gRPC request type from the payload of the
// "subtract" endpoint of the "calc" service.
func NewProtoSubtractRequest(payload *calc.SubtractPayload) *calcpb.SubtractRequest {
	message := &calcpb.SubtractRequest{
		A: int32(payload.A),
		B: int32(payload.B),
	}
	return message
}

// NewSubtractResult builds the result type of the "subtract" endpoint of the
// "calc" service from the gRPC response type.
func NewSubtractResult(message *calcpb.SubtractResponse) int {
	result := int(message.Field)
	return result
}

// NewProtoDivideRequest builds the gRPC request type from the payload of the
// "divide" endpoint of the "calc" service.
func NewProtoDivideRequest(payload *calc.DividePayload) *calcpb.DivideRequest {
	message := &calcpb.DivideRequest{
		A: int32(payload.A),
		B: int32(payload.B),
	}
	return message
}

// NewDivideResult builds the result type of the "divide" endpoint of the
// "calc" service from the gRPC response type.
func NewDivideResult(message *calcpb.DivideResponse) float64 {
	result := message.Field
	return result
}
