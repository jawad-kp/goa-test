// Code generated by goa v3.10.2, DO NOT EDIT.
//
// calc gRPC server
//
// Command:
// $ goa gen goa-test/design

package server

import (
	"context"
	calc "goa-test/gen/calc"
	calcpb "goa-test/gen/grpc/calc/pb"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the calcpb.CalcServer interface.
type Server struct {
	MultiplyH goagrpc.UnaryHandler
	AddH      goagrpc.UnaryHandler
	SubtractH goagrpc.UnaryHandler
	DivideH   goagrpc.UnaryHandler
	calcpb.UnimplementedCalcServer
}

// New instantiates the server struct with the calc service endpoints.
func New(e *calc.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		MultiplyH: NewMultiplyHandler(e.Multiply, uh),
		AddH:      NewAddHandler(e.Add, uh),
		SubtractH: NewSubtractHandler(e.Subtract, uh),
		DivideH:   NewDivideHandler(e.Divide, uh),
	}
}

// NewMultiplyHandler creates a gRPC handler which serves the "calc" service
// "multiply" endpoint.
func NewMultiplyHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeMultiplyRequest, EncodeMultiplyResponse)
	}
	return h
}

// Multiply implements the "Multiply" method in calcpb.CalcServer interface.
func (s *Server) Multiply(ctx context.Context, message *calcpb.MultiplyRequest) (*calcpb.MultiplyResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "multiply")
	ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
	resp, err := s.MultiplyH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*calcpb.MultiplyResponse), nil
}

// NewAddHandler creates a gRPC handler which serves the "calc" service "add"
// endpoint.
func NewAddHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeAddRequest, EncodeAddResponse)
	}
	return h
}

// Add implements the "Add" method in calcpb.CalcServer interface.
func (s *Server) Add(ctx context.Context, message *calcpb.AddRequest) (*calcpb.AddResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "add")
	ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
	resp, err := s.AddH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*calcpb.AddResponse), nil
}

// NewSubtractHandler creates a gRPC handler which serves the "calc" service
// "subtract" endpoint.
func NewSubtractHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeSubtractRequest, EncodeSubtractResponse)
	}
	return h
}

// Subtract implements the "Subtract" method in calcpb.CalcServer interface.
func (s *Server) Subtract(ctx context.Context, message *calcpb.SubtractRequest) (*calcpb.SubtractResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "subtract")
	ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
	resp, err := s.SubtractH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*calcpb.SubtractResponse), nil
}

// NewDivideHandler creates a gRPC handler which serves the "calc" service
// "divide" endpoint.
func NewDivideHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeDivideRequest, EncodeDivideResponse)
	}
	return h
}

// Divide implements the "Divide" method in calcpb.CalcServer interface.
func (s *Server) Divide(ctx context.Context, message *calcpb.DivideRequest) (*calcpb.DivideResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "divide")
	ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
	resp, err := s.DivideH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*calcpb.DivideResponse), nil
}
