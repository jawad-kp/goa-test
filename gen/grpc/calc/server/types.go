// Code generated by goa v3.10.2, DO NOT EDIT.
//
// calc gRPC server types
//
// Command:
// $ goa gen goa-test/design

package server

import (
	calc "goa-test/gen/calc"
	calcpb "goa-test/gen/grpc/calc/pb"
)

// NewMultiplyPayload builds the payload of the "multiply" endpoint of the
// "calc" service from the gRPC request type.
func NewMultiplyPayload(message *calcpb.MultiplyRequest) *calc.MultiplyPayload {
	v := &calc.MultiplyPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v
}

// NewProtoMultiplyResponse builds the gRPC response type from the result of
// the "multiply" endpoint of the "calc" service.
func NewProtoMultiplyResponse(result int) *calcpb.MultiplyResponse {
	message := &calcpb.MultiplyResponse{}
	message.Field = int32(result)
	return message
}

// NewAddPayload builds the payload of the "add" endpoint of the "calc" service
// from the gRPC request type.
func NewAddPayload(message *calcpb.AddRequest) *calc.AddPayload {
	v := &calc.AddPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v
}

// NewProtoAddResponse builds the gRPC response type from the result of the
// "add" endpoint of the "calc" service.
func NewProtoAddResponse(result int) *calcpb.AddResponse {
	message := &calcpb.AddResponse{}
	message.Field = int32(result)
	return message
}

// NewSubtractPayload builds the payload of the "subtract" endpoint of the
// "calc" service from the gRPC request type.
func NewSubtractPayload(message *calcpb.SubtractRequest) *calc.SubtractPayload {
	v := &calc.SubtractPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v
}

// NewProtoSubtractResponse builds the gRPC response type from the result of
// the "subtract" endpoint of the "calc" service.
func NewProtoSubtractResponse(result int) *calcpb.SubtractResponse {
	message := &calcpb.SubtractResponse{}
	message.Field = int32(result)
	return message
}

// NewDividePayload builds the payload of the "divide" endpoint of the "calc"
// service from the gRPC request type.
func NewDividePayload(message *calcpb.DivideRequest) *calc.DividePayload {
	v := &calc.DividePayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v
}

// NewProtoDivideResponse builds the gRPC response type from the result of the
// "divide" endpoint of the "calc" service.
func NewProtoDivideResponse(result float64) *calcpb.DivideResponse {
	message := &calcpb.DivideResponse{}
	message.Field = result
	return message
}

// NewGetNotesPayload builds the payload of the "getNotes" endpoint of the
// "calc" service from the gRPC request type.
func NewGetNotesPayload(message *calcpb.GetNotesRequest) *calc.GetNotesPayload {
	v := &calc.GetNotesPayload{
		UserID: message.UserId,
	}
	return v
}

// NewProtoGetNotesResponse builds the gRPC response type from the result of
// the "getNotes" endpoint of the "calc" service.
func NewProtoGetNotesResponse(result *calc.GetNotesResult) *calcpb.GetNotesResponse {
	message := &calcpb.GetNotesResponse{}
	if result.Notes != nil {
		message.Notes = make([]*calcpb.Note, len(result.Notes))
		for i, val := range result.Notes {
			message.Notes[i] = &calcpb.Note{
				Title: val.Title,
				Body:  val.Body,
			}
		}
	}
	return message
}

// NewCreateNotePayload builds the payload of the "createNote" endpoint of the
// "calc" service from the gRPC request type.
func NewCreateNotePayload(message *calcpb.CreateNoteRequest) *calc.CreateNotePayload {
	v := &calc.CreateNotePayload{
		UserID: message.UserId,
	}
	return v
}

// NewProtoCreateNoteResponse builds the gRPC response type from the result of
// the "createNote" endpoint of the "calc" service.
func NewProtoCreateNoteResponse(result *calc.Note) *calcpb.CreateNoteResponse {
	message := &calcpb.CreateNoteResponse{
		Title: result.Title,
		Body:  result.Body,
	}
	return message
}
