// Code generated by goa v3.5.2, DO NOT EDIT.
//
// calc gRPC server types
//
// Command:
// $ goa gen goa-test/design

package server

import (
	calc "goa-test/gen/calc"
	calcpb "goa-test/gen/grpc/calc/pb"
)

// NewMultiplyPayload builds the payload of the "multiply" endpoint of the
// "calc" service from the gRPC request type.
func NewMultiplyPayload(message *calcpb.MultiplyRequest) *calc.MultiplyPayload {
	v := &calc.MultiplyPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v
}

// NewMultiplyResponse builds the gRPC response type from the result of the
// "multiply" endpoint of the "calc" service.
func NewMultiplyResponse(result int) *calcpb.MultiplyResponse {
	message := &calcpb.MultiplyResponse{}
	message.Field = int32(result)
	return message
}

// NewAddPayload builds the payload of the "add" endpoint of the "calc" service
// from the gRPC request type.
func NewAddPayload(message *calcpb.AddRequest) *calc.AddPayload {
	v := &calc.AddPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v
}

// NewAddResponse builds the gRPC response type from the result of the "add"
// endpoint of the "calc" service.
func NewAddResponse(result int) *calcpb.AddResponse {
	message := &calcpb.AddResponse{}
	message.Field = int32(result)
	return message
}

// NewSubtractPayload builds the payload of the "subtract" endpoint of the
// "calc" service from the gRPC request type.
func NewSubtractPayload(message *calcpb.SubtractRequest) *calc.SubtractPayload {
	v := &calc.SubtractPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v
}

// NewSubtractResponse builds the gRPC response type from the result of the
// "subtract" endpoint of the "calc" service.
func NewSubtractResponse(result int) *calcpb.SubtractResponse {
	message := &calcpb.SubtractResponse{}
	message.Field = int32(result)
	return message
}

// NewDividePayload builds the payload of the "divide" endpoint of the "calc"
// service from the gRPC request type.
func NewDividePayload(message *calcpb.DivideRequest) *calc.DividePayload {
	v := &calc.DividePayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v
}

// NewDivideResponse builds the gRPC response type from the result of the
// "divide" endpoint of the "calc" service.
func NewDivideResponse(result float64) *calcpb.DivideResponse {
	message := &calcpb.DivideResponse{}
	message.Field = result
	return message
}

// NewGetNotesPayload builds the payload of the "getNotes" endpoint of the
// "calc" service from the gRPC request type.
func NewGetNotesPayload(message *calcpb.GetNotesRequest) *calc.GetNotesPayload {
	v := &calc.GetNotesPayload{
		UserID: message.UserId,
	}
	return v
}

// NewGetNotesResponse builds the gRPC response type from the result of the
// "getNotes" endpoint of the "calc" service.
func NewGetNotesResponse(result *calc.GetNotesResult) *calcpb.GetNotesResponse {
	message := &calcpb.GetNotesResponse{}
	if result.Notes != nil {
		message.Notes = make([]*calcpb.Note, len(result.Notes))
		for i, val := range result.Notes {
			message.Notes[i] = &calcpb.Note{}
			if val.Title != nil {
				message.Notes[i].Title = *val.Title
			}
			if val.Body != nil {
				message.Notes[i].Body = *val.Body
			}
		}
	}
	return message
}

// NewCreateNotePayload builds the payload of the "createNote" endpoint of the
// "calc" service from the gRPC request type.
func NewCreateNotePayload(message *calcpb.CreateNoteRequest) *calc.CreateNotePayload {
	v := &calc.CreateNotePayload{
		UserID: message.UserId,
	}
	if message.Note != nil {
		v.Note = protobufCalcpbNoteToCalcNote(message.Note)
	}
	return v
}

// NewCreateNoteResponse builds the gRPC response type from the result of the
// "createNote" endpoint of the "calc" service.
func NewCreateNoteResponse() *calcpb.CreateNoteResponse {
	message := &calcpb.CreateNoteResponse{}
	return message
}

// protobufCalcpbNoteToCalcNote builds a value of type *calc.Note from a value
// of type *calcpb.Note.
func protobufCalcpbNoteToCalcNote(v *calcpb.Note) *calc.Note {
	if v == nil {
		return nil
	}
	res := &calc.Note{}
	if v.Title != "" {
		res.Title = &v.Title
	}
	if v.Body != "" {
		res.Body = &v.Body
	}

	return res
}

// svcCalcNoteToCalcpbNote builds a value of type *calcpb.Note from a value of
// type *calc.Note.
func svcCalcNoteToCalcpbNote(v *calc.Note) *calcpb.Note {
	if v == nil {
		return nil
	}
	res := &calcpb.Note{}
	if v.Title != nil {
		res.Title = *v.Title
	}
	if v.Body != nil {
		res.Body = *v.Body
	}

	return res
}
