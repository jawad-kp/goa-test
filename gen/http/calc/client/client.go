// Code generated by goa v3.5.2, DO NOT EDIT.
//
// calc client HTTP transport
//
// Command:
// $ goa gen goa-test/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the calc service endpoint HTTP clients.
type Client struct {
	// Multiply Doer is the HTTP client used to make requests to the multiply
	// endpoint.
	MultiplyDoer goahttp.Doer

	// Add Doer is the HTTP client used to make requests to the add endpoint.
	AddDoer goahttp.Doer

	// Subtract Doer is the HTTP client used to make requests to the subtract
	// endpoint.
	SubtractDoer goahttp.Doer

	// Divide Doer is the HTTP client used to make requests to the divide endpoint.
	DivideDoer goahttp.Doer

	// GetNotes Doer is the HTTP client used to make requests to the getNotes
	// endpoint.
	GetNotesDoer goahttp.Doer

	// CreateNote Doer is the HTTP client used to make requests to the createNote
	// endpoint.
	CreateNoteDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the calc service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		MultiplyDoer:        doer,
		AddDoer:             doer,
		SubtractDoer:        doer,
		DivideDoer:          doer,
		GetNotesDoer:        doer,
		CreateNoteDoer:      doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Multiply returns an endpoint that makes HTTP requests to the calc service
// multiply server.
func (c *Client) Multiply() goa.Endpoint {
	var (
		decodeResponse = DecodeMultiplyResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildMultiplyRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MultiplyDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("calc", "multiply", err)
		}
		return decodeResponse(resp)
	}
}

// Add returns an endpoint that makes HTTP requests to the calc service add
// server.
func (c *Client) Add() goa.Endpoint {
	var (
		decodeResponse = DecodeAddResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAddRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("calc", "add", err)
		}
		return decodeResponse(resp)
	}
}

// Subtract returns an endpoint that makes HTTP requests to the calc service
// subtract server.
func (c *Client) Subtract() goa.Endpoint {
	var (
		decodeResponse = DecodeSubtractResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSubtractRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SubtractDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("calc", "subtract", err)
		}
		return decodeResponse(resp)
	}
}

// Divide returns an endpoint that makes HTTP requests to the calc service
// divide server.
func (c *Client) Divide() goa.Endpoint {
	var (
		decodeResponse = DecodeDivideResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDivideRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DivideDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("calc", "divide", err)
		}
		return decodeResponse(resp)
	}
}

// GetNotes returns an endpoint that makes HTTP requests to the calc service
// getNotes server.
func (c *Client) GetNotes() goa.Endpoint {
	var (
		decodeResponse = DecodeGetNotesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetNotesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetNotesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("calc", "getNotes", err)
		}
		return decodeResponse(resp)
	}
}

// CreateNote returns an endpoint that makes HTTP requests to the calc service
// createNote server.
func (c *Client) CreateNote() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateNoteRequest(c.encoder)
		decodeResponse = DecodeCreateNoteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateNoteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateNoteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("calc", "createNote", err)
		}
		return decodeResponse(resp)
	}
}
